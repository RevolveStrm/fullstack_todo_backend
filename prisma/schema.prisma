generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
  CANCELED
}

enum TaskPriority {
  HIGH
  MEDIUM
  LOW
}

enum TagColor {
  RED
  ORANGE
  YELLOW
  GREEN
  TEAL
  BLUE
  INDIGO
  PURPLE
  PINK
  BROWN
  GRAY
  BLACK
  WHITE
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  password     String // encrypted by bcrypt
  refreshToken String?   @map("refresh_token") // encrypted by jwt
  role         UserRole  @default(USER)
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime? @updatedAt @map("updated_at")

  tasks Task[]
  tags  Tag[]
  files File[]

  @@map("users")
}

model Task {
  id          String       @id @default(uuid())
  title       String
  description String?
  status      TaskStatus   @default(TODO)
  priority    TaskPriority @default(LOW)
  deadlineAt  DateTime?    @map("deadline_at")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime?    @updatedAt @map("updated_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  tags  TagOnTask[]
  files File[]

  @@index([userId])
  @@map("tasks")
}

model Tag {
  id    String   @id @default(uuid())
  title String
  color TagColor @default(GRAY)

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  tasks TagOnTask[]

  @@map("tags")
}

model TagOnTask {
  id     String @id @default(uuid())
  taskId String
  tagId  String

  task Task @relation(fields: [taskId], references: [id])
  tag  Tag  @relation(fields: [tagId], references: [id])

  @@unique([taskId, tagId])
  @@map("tag_on_task")
}

model File {
  id            String    @id @default(uuid())
  size          Int
  extension     String
  originalName  String    @map("original_name")
  encryptedName String    @map("encrypted_name")
  isPublic      Boolean   @default(false)
  createdAt     DateTime  @default(now()) @map("created_at")
  deletedAt     DateTime?

  taskId String? @map("task_id")
  task   Task?   @relation(fields: [taskId], references: [id])

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  @@unique([taskId, userId, size, originalName])
  @@index([taskId])
  @@map("files")
}
